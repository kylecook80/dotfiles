pushd()
{
    command pushd "$@" > /dev/null
}

popd()
{
    command popd "$@" > /dev/null
}

task()
{
    TASK_ACTIVE="T"
    echo -n "[ ${lbluef}$1${reset} ]: "
    prog
}

taskerror()
{
    progend
    if [[ "${TASK_ACTIVE}" = "T" ]]; then
        echo "${lredf}$1${reset}"
        unset TASK_ACTIVE
    fi
}

taskdone()
{
    progend
    if [[ "${TASK_ACTIVE}" = "T" ]]; then
        echo "${lgreenf}Complete${reset}"
        unset TASK_ACTIVE
    fi
}

run()
{
    if [[ -z "${RUN_STATUS+x}" ]]; then
        echo ""
        msg "COMMAND" "$@"
        "$@" || RUN_STATUS=$?
    fi
}

check()
{
    if [[ "${RUN_STATUS}" = "${1}" ]]; then
        CHECK_ERROR="${1}"

        if [[ "${TASK_ACTIVE}" = "Y" ]]; then
            taskerror "$2"
        else
            error "$2"
        fi
    fi
}

checkdone()
{
    unset RUN_STATUS
}

checkexit()
{
    if [[ ! -z "${CHECK_ERROR}" ]]; then
        progend
        exit ${CHECK_ERROR}
    fi
    unset RUN_STATUS
}

download_url()
{
    if hash wget 2>/dev/null; then
        if [[ ! -z "${1+x}" || ! -z "${2+x}" ]]; then
            wget -qO - "${1}" > "${2}" || return ${ERROR_DOWNLOAD_FAILED}
        fi
    elif hash curl 2>/dev/null; then
        if [[ ! -z "${1+x}" || ! -z "${2+x}" ]]; then
            curl -sL "${1}" > "${2}" || return ${ERROR_DOWNLOAD_FAILED}
        fi
    else
        return ${ERROR_NODOWNLOADER}
    fi
    return 0
}

extract_archive()
{
    if [[ ! -z "${1+x}" || ! -z "${2+x}" ]]; then
        pushd "${2}"
        local stat=$(tar xf "${1}")
        popd
        if [[ "${stat}" > 0 ]]; then
            return ${ERROR_EXTRACT_FAILED}
        fi
    fi
    return 0
}
