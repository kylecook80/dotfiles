#!/usr/bin/env bash

OS=`echo $(uname) | tr '[:upper:]' '[:lower:]'`
# DIR="$( cd "$( dirname "${BASH_SOURCE[1]}" )" && pwd )"
DIR="$HOME/.dotfiles"

ECHO="/bin/echo -n"

echo "OS: $OS"
echo "DIR: $DIR"

install_dotfiles() {
    DEFAULT_FILES="aliases gdbinit gitconfig gitignore screenrc vimrc zshenv zshrc zsh"
    I3_FILES="i3 polybar rofi xinitrc xmodmaprc Xresources Xresources.d"

    for item in $DEFAULT_FILES; do
        if [ -e "$item-$OS" ]; then
            set -- "$@" "$item-$OS"
        else
            set -- "$@" "$item"
        fi
    done

    regex=".*-$OS"
    for item do
        if echo "$item" | grep -q $regex; then
            file=$(echo "$item" | cut -d'-' -f1)
            $ECHO "Creating file .$file: "
            if [ ! -e "$HOME/.$file" ]; then
                cat "$file" "$item" > "$HOME/.$file"
                echo "Success"
            else
                echo "Already exists"
            fi
        else
            # echo "no_regex: %s\n" "$HOME/.$item"
            # ln -s ".dotfiles/$item" "$HOME/.$item"
            $ECHO "Linking file .$item: "
            if [ ! -e "$HOME/.$item" -a ! -L "$HOME/.$item" ]; then
                ln -sf "$DIR/$item" "$HOME/.$item"
                echo "Success"
            else
                echo "Already exists"
            fi
        fi
    done
}

install_scripts() {
    mkdir -p $HOME/bin
    for item in $DIR/scripts/*; do
        $ECHO "Installing $(basename $item): "
        if [ ! -L "$HOME/bin/$(basename $item)" ]; then
            ln -sf $item $HOME/bin
            echo "Success"
        else
            echo "Already exists"
        fi
    done
}

install_sublime_prefs() {
    $ECHO "Installing Sublime Text 3 Preferences: "
    if [ "$OS" = "darwin" ]; then
        if [ -L "$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings" ]; then
            echo "Already exists"
            return
        fi
        if [ -e "$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings" ]; then
            mv "$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings" "$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings.old"
        fi

        ln -s "$HOME/.dotfiles/Preferences.sublime-settings" "$HOME/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings"
        echo "Success"
    else
        echo "Operating System not supported."
    fi
}

install_brew_apps() {
    if test ! $(which brew); then
        echo "Installing X Code CLI tools"
        xcode-select --install
        echo "Installing Homebrew..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    # Make sure we’re using the latest Homebrew
    brew update
    # Upgrade any already-installed formulae
    brew tap homebrew/cask-fonts
    brew upgrade

    apps=(
        autojump
        binutils
        coreutils
        curl
        curl-openssl
        dockutil
        findutils
        gcc
        git
        neofetch
        nmap
        pandoc
        pandoc-citeproc
        pandoc-crossref
        python
        python@2
        ruby
        vim
        wget
        xz
        zsh
    )
    brew install "${apps[@]}"

    # Remove outdated versions from the cellar
    brew cleanup
}

install_brew_cask() {
    echo “Installing cask...”
    brew tap homebrew/cask

    CASKS=(
        1password
        adobe-creative-cloud
        bartender
        daisydisk
        discord
        docker
        dropbox
        duet
        fantastical
        fantasy-grounds
        firefox
        font-fira-code
        font-fira-mono
        font-fira-sans
        font-hack
        forklift
        google-chrome
        gpg-suite
        iterm2
        jetbrains-toolbox
        karabiner-elements
        latexit
        mactex
        microsoft-office
        mountain
        nextcloud
        onedrive
        pdf-expert
        scroll-reverser
        signal
        skim
        slack
        sublime-text
        texstudio
        tunnelblick
        twitch
        vagrant
        virtualbox
        virtualbox-extension-pack
        vmware-fusion
        vmware-remote-console
        wireshark
        yujitach-menumeters
        zotero
    )

    echo “Installing cask apps...”
    brew cask install ${CASKS[@]}
}

install_dotfiles
install_scripts
install_brew_apps
install_brew_cask
install_sublime_prefs
